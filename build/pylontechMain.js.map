{
  "version": 3,
  "sources": ["../src/pylontechMain.ts"],
  "sourcesContent": ["// Copyright (c) 2020-2023 Tr\u00E4ger\n\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\nimport * as utils from '@iobroker/adapter-core';\nimport { SerialPort } from 'serialport';\nimport { FktInOrder } from './pylontech/FktInOrder';\nimport { Value } from './pylontech/Value';\nimport WorkerAbstract from './pylontech/WorkerAbstract';\nimport WorkerNet from './pylontech/WorkerNet';\nimport WorkerSerial from './pylontech/WorkerSerial';\n\nclass Pylontech extends utils.Adapter {\n  private _workTimer: NodeJS.Timeout | undefined;\n  private _fktInOrder: FktInOrder | undefined;\n\n  /**\n   * a new live\n   */\n  public constructor(options: Partial<utils.AdapterOptions> = {}) {\n    super({\n      ...options,\n      name: 'pylontech',\n    });\n\n    this.on('ready', this.onReady.bind(this));\n    this.on('stateChange', this.onStateChange.bind(this));\n    this.on('message', this.onMessage.bind(this));\n    this.on('unload', this._onUnload.bind(this));\n  }\n\n  /**\n   * Is called when databases are connected and adapter received configuration.\n   */\n  private async onReady(): Promise<void> {\n    this.setState('info.connection', false, true);\n\n    this.subscribeStates('*');\n    this._fktInOrder = new FktInOrder(this.log.error);\n\n    if (typeof this.config.connection == 'undefined') this.config.connection = '1';\n    if (typeof this.config.baudrate == 'undefined') this.config.baudrate = 115200;\n    if (typeof this.config.rfc2217 == 'undefined') this.config.rfc2217 = false;\n    if (typeof this.config.netbaudrate == 'undefined') this.config.netbaudrate = 115200;\n    if (typeof this.config.info == 'undefined') this.config.info = true;\n    if (typeof this.config.power == 'undefined') this.config.power = true;\n    if (typeof this.config.statistic == 'undefined') this.config.statistic = true;\n    if (typeof this.config.celldata == 'undefined') this.config.celldata = true;\n    if (typeof this.config.cellsoh == 'undefined') this.config.cellsoh = true;\n    if (typeof this.config.log == 'undefined') this.config.log = true;\n    if (typeof this.config.cycle == 'undefined') this.config.cycle = 5;\n\n    this._fktInOrder.addFunc(this._onTimer.bind(this));\n    this._workTimer = setInterval((): void => {\n      if (this._fktInOrder) this._fktInOrder.addFunc(this._onTimer.bind(this));\n    }, this.config.cycle * 60000);\n  }\n\n  private _debugData(data: Buffer): void {\n    this.log.silly(data.toString());\n  }\n\n  /**\n   * gets the dada\n   */\n  private _onTimer(resolve: (value: void | PromiseLike<void>) => void, reject: (reason?: any) => void): void {\n    try {\n      const worker: WorkerAbstract =\n        this.config.connection == '1'\n          ? new WorkerSerial(this.config.device, this.config.baudrate, false, this._debugData.bind(this))\n          : new WorkerNet(this.config.host, this.config.port, this.config.netbaudrate, this.config.rfc2217, false, this._debugData.bind(this));\n\n      worker\n        .getData({\n          info: this.config.info,\n          power: this.config.power,\n          statistic: this.config.statistic,\n          celldata: this.config.celldata,\n          cellsoh: this.config.cellsoh,\n          log: this.config.log,\n        })\n        .then((allData: any) => {\n          worker.close();\n          this.setState('info.connection', true, true);\n          resolve();\n          const walk = async (path: string, val: any): Promise<void> => {\n            if (val instanceof Value) {\n              const objdesc: any = {\n                type: 'state',\n                common: {\n                  name: val.name,\n                  type: 'number',\n                  role: 'value',\n                  read: true,\n                  write: val.write,\n                },\n                native: {},\n              };\n              if (val.unit) objdesc.common.unit = val.unit;\n              if (val.function) objdesc.native.function = val.function;\n              switch (val.type) {\n                case 'date':\n                  objdesc.common.role = 'value.time';\n                  break;\n                case 'boolean':\n                case 'string':\n                  objdesc.common.type = val.type;\n                  break;\n              }\n              await this.setObjectNotExistsAsync(path, objdesc);\n              this.setStateAsync(path, val.value, true);\n            } else if (typeof val == 'object') {\n              let p = '';\n              if (path !== '') p = '.';\n              Object.keys(val).forEach(key => {\n                walk(`${path}${p}${key}`, val[key]);\n              });\n            }\n          };\n          walk('', allData);\n          this.getStatesAsync('info.*.connected').then(state => {\n            Object.keys(state).forEach(path => {\n              const info = path.split('.');\n              if (!(allData.info && allData.info[info[3]] && allData.info[info[3]].connected)) {\n                this.setStateAsync(path, false, true);\n              }\n            });\n          });\n        })\n        .catch(err => {\n          worker.close();\n          reject(err);\n        });\n    } catch (e) {\n      reject((e as Error).message);\n    }\n  }\n\n  /**\n   * Sets the time on the divice\n   */\n  private _setTime(time: number, cb?: ((ok: boolean) => void) | undefined): void {\n    const d = new Date(time);\n    if (this._fktInOrder) {\n      this._fktInOrder.addFunc((resolve: (value: void | PromiseLike<void>) => void, reject: (reason?: any) => void): void => {\n        try {\n          const worker: WorkerAbstract =\n            this.config.connection == '1'\n              ? new WorkerSerial(this.config.device, this.config.baudrate, false, this._debugData.bind(this))\n              : new WorkerNet(this.config.host, this.config.port, this.config.netbaudrate, this.config.rfc2217, false, this._debugData.bind(this));\n\n          function f2(val: number): string {\n            return val.toString().padStart(2, '0');\n          }\n          const cmd = `time ${f2(d.getFullYear() % 100)} ${f2(d.getMonth() + 1)} ${f2(d.getDate())} ${f2(d.getHours())} ${f2(d.getMinutes())} ${f2(\n            d.getSeconds()\n          )}`;\n          worker\n            .sendCommand(cmd)\n            .then(() => {\n              worker.close();\n              resolve();\n              if (cb) cb(true);\n            })\n            .catch(err => {\n              worker.close();\n              reject(err);\n              if (cb) cb(false);\n            });\n        } catch (e) {\n          reject((e as Error).message);\n          if (cb) cb(false);\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the time on the divice\n   */\n  private _setSpeed(cb?: ((ok: boolean) => void) | undefined): void {\n    if (this._fktInOrder) {\n      this._fktInOrder.addFunc((resolve: (value: void | PromiseLike<void>) => void, reject: (reason?: any) => void): void => {\n        try {\n          const worker: WorkerAbstract =\n            this.config.connection == '1'\n              ? new WorkerSerial(this.config.device, this.config.baudrate, true, this._debugData.bind(this))\n              : new WorkerNet(this.config.host, this.config.port, this.config.netbaudrate, this.config.rfc2217, true, this._debugData.bind(this));\n\n          worker\n            .sendSpeedInit()\n            .then(() => {\n              worker.close();\n              resolve();\n              if (cb) cb(true);\n            })\n            .catch(err => {\n              worker.close();\n              reject(err);\n              if (cb) cb(false);\n            });\n        } catch (e) {\n          reject((e as Error).message);\n          if (cb) cb(false);\n        }\n      });\n    }\n  }\n\n  /**\n   * Is called when adapter shuts down - callback has to be called under any circumstances!\n   */\n  private _onUnload(callback: () => void): void {\n    try {\n      clearInterval(this._workTimer);\n      callback();\n    } catch (e) {\n      callback();\n    }\n  }\n\n  /**\n   * Is called if a subscribed state changes\n   */\n  private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n    if (state && state.ack == false) {\n      this.getObjectAsync(id).then((obj: ioBroker.Object | null | undefined) => {\n        if (obj && obj.common.write && obj.native.function) {\n          this.log.debug(obj.native.function);\n          switch (obj.native.function) {\n            case 'settime':\n              if (typeof state.val == 'number') this._setTime(state.val);\n              break;\n            case 'akttime':\n              if (state.val)\n                this._setTime(new Date().getTime(), (ok: boolean) => {\n                  this.setStateAsync(id, ok, true);\n                });\n              break;\n            case 'setspeed115200':\n              this._setSpeed((ok: boolean) => {\n                this.setStateAsync(id, ok, true);\n              });\n              break;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Is called if a message was send\n   */\n  private onMessage(obj: ioBroker.Message): void {\n    this.log.debug(JSON.stringify(obj));\n    let wait = false;\n    if (typeof obj === 'object' && obj.message) {\n      switch (obj.command) {\n        case 'getDevices':\n          wait = false;\n          SerialPort.list().then(port => {\n            const ports: string[] = [];\n            port.forEach(p => {\n              ports.push(p.path);\n            });\n            //obj.message = ports;\n            obj.message = JSON.stringify(ports);\n          });\n          break;\n        default:\n          obj.message = `Unknown command: ${obj.command}`;\n          this.log.warn(obj.message);\n          return;\n      }\n    }\n    if (!wait && obj.callback) {\n      this.sendTo(obj.from, obj.command, obj.message, obj.callback);\n    }\n    return;\n  }\n}\n\nif (require.main !== module) {\n  // Export the constructor in compact mode\n  module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Pylontech(options);\n} else {\n  // otherwise start the instance directly\n  (() => new Pylontech())();\n}\n"],
  "mappings": "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",
  "names": ["WorkerSerial", "WorkerNet", "f2"]
}
