{
  "version": 3,
  "sources": ["../../src/pylontech/ConsolenReader.ts"],
  "sourcesContent": ["// Copyright (c) 2020-2023 Tr\u00E4ger\n\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\nimport debug from 'debug';\nimport { Transform } from 'stream';\n\nconst debugApi = debug('pylontech:api');\n\nexport class ConsolenReader extends Transform {\n  protected _buffer: Buffer;\n  constructor() {\n    super({});\n    this._buffer = Buffer.alloc(0);\n    debugApi('MyParser.constructor');\n  }\n\n  _transform(chunk: Buffer, encoding: string, cb: () => void): void {\n    debugApi('MyParser._transform', 'chunk', chunk.toString('hex'), 'encoding', encoding);\n    let data: Buffer = Buffer.concat([this._buffer, chunk]);\n    let position: number;\n    let start: number;\n    if ((position = data.lastIndexOf('[Enter]')) !== -1) {\n      data.write('-------', position);\n      this.emit('needsenddata', '\\r');\n    }\n    while ((position = data.lastIndexOf('$$')) !== -1) {\n      if ((start = data.lastIndexOf('>', position)) !== -1) {\n        this.push(data.subarray(start, position - 1));\n      }\n      data = data.subarray(position + 2);\n    }\n    this._buffer = data;\n    cb();\n  }\n\n  _flush(cb: () => void): void {\n    debugApi('MyParser._flush');\n    this.push(this._buffer);\n    this._buffer = Buffer.alloc(0);\n    cb();\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA,mBAAkB;AAClB,oBAA0B;AAE1B,MAAM,eAAW,aAAAA,SAAM,eAAe;AAE/B,MAAM,uBAAuB,wBAAU;AAAA,EAE5C,cAAc;AACZ,UAAM,CAAC,CAAC;AACR,SAAK,UAAU,OAAO,MAAM,CAAC;AAC7B,aAAS,sBAAsB;AAAA,EACjC;AAAA,EAEA,WAAW,OAAe,UAAkB,IAAsB;AAChE,aAAS,uBAAuB,SAAS,MAAM,SAAS,KAAK,GAAG,YAAY,QAAQ;AACpF,QAAI,OAAe,OAAO,OAAO,CAAC,KAAK,SAAS,KAAK,CAAC;AACtD,QAAI;AACJ,QAAI;AACJ,SAAK,WAAW,KAAK,YAAY,SAAS,OAAO,IAAI;AACnD,WAAK,MAAM,WAAW,QAAQ;AAC9B,WAAK,KAAK,gBAAgB,IAAI;AAAA,IAChC;AACA,YAAQ,WAAW,KAAK,YAAY,IAAI,OAAO,IAAI;AACjD,WAAK,QAAQ,KAAK,YAAY,KAAK,QAAQ,OAAO,IAAI;AACpD,aAAK,KAAK,KAAK,SAAS,OAAO,WAAW,CAAC,CAAC;AAAA,MAC9C;AACA,aAAO,KAAK,SAAS,WAAW,CAAC;AAAA,IACnC;AACA,SAAK,UAAU;AACf,OAAG;AAAA,EACL;AAAA,EAEA,OAAO,IAAsB;AAC3B,aAAS,iBAAiB;AAC1B,SAAK,KAAK,KAAK,OAAO;AACtB,SAAK,UAAU,OAAO,MAAM,CAAC;AAC7B,OAAG;AAAA,EACL;AACF;",
  "names": ["debug"]
}
