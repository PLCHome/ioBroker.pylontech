{
  "version": 3,
  "sources": ["../../src/pylontech/ConvertValue.ts"],
  "sourcesContent": ["import debug from \"debug\";\nimport { Value } from \"./Value\";\n\nconst debugCVvalue = debug(\"pylontech:cvalue\");\n\ninterface ITest {\n    rex: RegExp;\n    type: string;\n    unit: string;\n    convert: (str: string) => any;\n}\n\nexport class ConvertValue {\n    protected _tests: ITest[] = [\n        { rex: /^(-|\\+)?\\d+$/gm, type: \"number\", unit: \"\", convert: this._toNumber },\n        { rex: /^(-|\\+)?\\d+\\s*%$/gm, type: \"number\", unit: \"%\", convert: this._toNumber },\n        { rex: /^(-|\\+)?\\d+\\s*mAH$/gm, type: \"number\", unit: \"mAH\", convert: this._toNumber },\n        { rex: /^(-|\\+)?\\d+\\s*mA$/gm, type: \"number\", unit: \"mA\", convert: this._toNumber },\n        { rex: /^(-|\\+)?\\d+\\s*mV$/gm, type: \"number\", unit: \"mV\", convert: this._toNumber },\n        { rex: /^(-|\\+)?\\d+\\s*mC$/gm, type: \"number\", unit: \"mC\", convert: this._toNumber },\n        { rex: /^(-|\\+)?\\d+\\s*s$/gm, type: \"number\", unit: \"s\", convert: this._toNumber },\n        { rex: /^0x\\d+$/gm, type: \"number\", unit: \"\", convert: this._HexToNumber },\n        {\n            rex: /^\\d{2}-[01]\\d-[0-3]\\d [0-2]\\d:[0-6]\\d:[0-6]\\d$/gm,\n            type: \"date\",\n            unit: \"\",\n            convert: this._toDateS,\n        },\n        {\n            rex: /^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-6]\\d:[0-6]\\d\\.\\d{3}Z$/gm,\n            type: \"date\",\n            unit: \"\",\n            convert: this._toDate,\n        },\n        {\n            rex: /^\\d{4}-[01]\\d-[0-3]\\d [0-2]\\d:[0-6]\\d:[0-6]\\d$/gm,\n            type: \"date\",\n            unit: \"\",\n            convert: this._toDate,\n        },\n    ];\n\n    protected _toNumber(str: string): number {\n        debugCVvalue(\"toN_toNumberumber\", \"str\", str);\n        return parseInt(str, 10);\n    }\n\n    protected _HexToNumber(str: string): number {\n        debugCVvalue(\"_HexToNumber\", \"str\", str);\n        return parseInt(str.substring(2), 16);\n    }\n\n    protected _toDateS(str: string): number {\n        debugCVvalue(\"_toDateS\", \"str\", str);\n        return new Date(`20${str}`).getTime();\n    }\n\n    protected _toDate(str: string): number {\n        debugCVvalue(\"_toDate\", \"str\", str);\n        return new Date(str).getTime();\n    }\n\n    parseValues(key: string, value: string, noConvertKeys: string[]): Value {\n        const val: string = value.trim();\n        const result: Value = new Value(val, \"string\", \"\", key);\n        if (!noConvertKeys.includes(key)) {\n            this._tests.forEach((element: ITest) => {\n                const rex: RegExp = new RegExp(element.rex);\n                if (rex.test(val)) {\n                    result.set(element.convert(val), element.type, element.unit, key);\n                }\n            });\n        }\n        return result;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,mBAAsB;AAEtB,MAAM,mBAAe,aAAAA,SAAM,kBAAkB;AAStC,MAAM,aAAa;AAAA,EAAnB;AACH,SAAU,SAAkB;AAAA,MACxB,EAAE,KAAK,kBAAkB,MAAM,UAAU,MAAM,IAAI,SAAS,KAAK,UAAU;AAAA,MAC3E,EAAE,KAAK,sBAAsB,MAAM,UAAU,MAAM,KAAK,SAAS,KAAK,UAAU;AAAA,MAChF,EAAE,KAAK,wBAAwB,MAAM,UAAU,MAAM,OAAO,SAAS,KAAK,UAAU;AAAA,MACpF,EAAE,KAAK,uBAAuB,MAAM,UAAU,MAAM,MAAM,SAAS,KAAK,UAAU;AAAA,MAClF,EAAE,KAAK,uBAAuB,MAAM,UAAU,MAAM,MAAM,SAAS,KAAK,UAAU;AAAA,MAClF,EAAE,KAAK,uBAAuB,MAAM,UAAU,MAAM,MAAM,SAAS,KAAK,UAAU;AAAA,MAClF,EAAE,KAAK,sBAAsB,MAAM,UAAU,MAAM,KAAK,SAAS,KAAK,UAAU;AAAA,MAChF,EAAE,KAAK,aAAa,MAAM,UAAU,MAAM,IAAI,SAAS,KAAK,aAAa;AAAA,MACzE;AAAA,QACI,KAAK;AAAA,QACL,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS,KAAK;AAAA,MAClB;AAAA,MACA;AAAA,QACI,KAAK;AAAA,QACL,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS,KAAK;AAAA,MAClB;AAAA,MACA;AAAA,QACI,KAAK;AAAA,QACL,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS,KAAK;AAAA,MAClB;AAAA,IACJ;AAAA;AAAA,EAEU,UAAU,KAAqB;AACrC,iBAAa,qBAAqB,OAAO,GAAG;AAC5C,WAAO,SAAS,KAAK,EAAE;AAAA,EAC3B;AAAA,EAEU,aAAa,KAAqB;AACxC,iBAAa,gBAAgB,OAAO,GAAG;AACvC,WAAO,SAAS,IAAI,UAAU,CAAC,GAAG,EAAE;AAAA,EACxC;AAAA,EAEU,SAAS,KAAqB;AACpC,iBAAa,YAAY,OAAO,GAAG;AACnC,WAAO,IAAI,KAAK,KAAK,KAAK,EAAE,QAAQ;AAAA,EACxC;AAAA,EAEU,QAAQ,KAAqB;AACnC,iBAAa,WAAW,OAAO,GAAG;AAClC,WAAO,IAAI,KAAK,GAAG,EAAE,QAAQ;AAAA,EACjC;AAAA,EAEA,YAAY,KAAa,OAAe,eAAgC;AACpE,UAAM,MAAc,MAAM,KAAK;AAC/B,UAAM,SAAgB,IAAI,mBAAM,KAAK,UAAU,IAAI,GAAG;AACtD,QAAI,CAAC,cAAc,SAAS,GAAG,GAAG;AAC9B,WAAK,OAAO,QAAQ,CAAC,YAAmB;AACpC,cAAM,MAAc,IAAI,OAAO,QAAQ,GAAG;AAC1C,YAAI,IAAI,KAAK,GAAG,GAAG;AACf,iBAAO,IAAI,QAAQ,QAAQ,GAAG,GAAG,QAAQ,MAAM,QAAQ,MAAM,GAAG;AAAA,QACpE;AAAA,MACJ,CAAC;AAAA,IACL;AACA,WAAO;AAAA,EACX;AACJ;",
  "names": ["debug"]
}
