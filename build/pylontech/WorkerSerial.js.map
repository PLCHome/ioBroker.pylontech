{
  "version": 3,
  "sources": ["../../src/pylontech/WorkerSerial.ts"],
  "sourcesContent": ["import Debug from \"debug\";\nimport { SerialPort } from \"serialport\";\nimport WorkerAbstract from \"./WorkerAbstract\";\n\nconst debugApi = Debug(\"pylontech:api\");\n\nexport = class WorkerSerial extends WorkerAbstract {\n    protected _socket: SerialPort;\n\n    constructor(path: string, baudRate: number, debugData?: (data: Buffer) => void) {\n        debugApi(\"MyWorkerNet.constructor\", \"path:\", path, \"baudRate:\", baudRate);\n        super();\n        this._socket = new SerialPort({ path, baudRate });\n        if (debugData) this._socket.on(\"data\", debugData);\n        this._socket.pipe(this._consolenReader);\n        this._socket.open(this._connected.bind(this));\n    }\n\n    sendData(data: string): void {\n        debugApi(\"MyWorkerSerial.sendData\", \"data:\", data.toString(), \"this._activeCmd:\", this._activeCmd);\n        this._socket.write(data);\n    }\n\n    close(): Promise<boolean> {\n        debugApi(\"MyWorkerSerial.close\");\n        return new Promise<boolean>((resolve) => {\n            this._socket.close(() => {\n                resolve(true);\n            });\n        });\n    }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,mBAAkB;AAClB,wBAA2B;AAC3B,4BAA2B;AAE3B,MAAM,eAAW,aAAAA,SAAM,eAAe;AAEtC,iBAAS,MAAM,qBAAqB,sBAAAC,QAAe;AAAA,EAG/C,YAAY,MAAc,UAAkB,WAAoC;AAC5E,aAAS,2BAA2B,SAAS,MAAM,aAAa,QAAQ;AACxE,UAAM;AACN,SAAK,UAAU,IAAI,6BAAW,EAAE,MAAM,SAAS,CAAC;AAChD,QAAI;AAAW,WAAK,QAAQ,GAAG,QAAQ,SAAS;AAChD,SAAK,QAAQ,KAAK,KAAK,eAAe;AACtC,SAAK,QAAQ,KAAK,KAAK,WAAW,KAAK,IAAI,CAAC;AAAA,EAChD;AAAA,EAEA,SAAS,MAAoB;AACzB,aAAS,2BAA2B,SAAS,KAAK,SAAS,GAAG,oBAAoB,KAAK,UAAU;AACjG,SAAK,QAAQ,MAAM,IAAI;AAAA,EAC3B;AAAA,EAEA,QAA0B;AACtB,aAAS,sBAAsB;AAC/B,WAAO,IAAI,QAAiB,CAAC,YAAY;AACrC,WAAK,QAAQ,MAAM,MAAM;AACrB,gBAAQ,IAAI;AAAA,MAChB,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AACJ;",
  "names": ["Debug", "WorkerAbstract"]
}
