{
  "version": 3,
  "sources": ["../../src/pylontech/WorkerSerial.ts"],
  "sourcesContent": ["// Copyright (c) 2020-2023 Tr\u00E4ger\n\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\nimport Debug from 'debug';\nimport { SerialPort } from 'serialport';\nimport WorkerAbstract from './WorkerAbstract';\n\nconst debugApi = Debug('pylontech:api');\n\nexport = class WorkerSerial extends WorkerAbstract {\n  protected _socket: SerialPort;\n\n  constructor(path: string, baudRate: number, model: string, noPrompt?: boolean, debugData?: (data: Buffer) => void) {\n    debugApi('MyWorkerNet.constructor', 'path:', path, 'baudRate:', baudRate);\n    super(model);\n    this._socket = new SerialPort({ path, baudRate, autoOpen: false });\n    if (noPrompt) this._noPrompt = noPrompt;\n    if (debugData) this._socket.on('data', debugData);\n    this._socket.pipe(this._consolenReader);\n  }\n\n  open(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this._socket.open(\n        ((err: any) => {\n          if (err) {\n            console.log(err);\n            reject(err);\n          } else {\n            this._connected();\n            resolve();\n          }\n        }).bind(this)\n      );\n    });\n  }\n\n  sendDataB(data: Buffer): void {\n    debugApi('MyWorkerSerial.sendData', 'data:', data.toString('hex'), 'this._activeCmd:', this._activeCmd);\n    this._socket.write(data);\n  }\n\n  sendData(data: string | Buffer): void {\n    debugApi('MyWorkerSerial.sendData', 'data:', data, 'this._activeCmd:', this._activeCmd);\n    this._socket.write(data);\n  }\n\n  close(): Promise<boolean> {\n    debugApi('MyWorkerSerial.close');\n    return new Promise<boolean>(resolve => {\n      this._socket.close(() => {\n        resolve(true);\n      });\n    });\n  }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAoBA,mBAAkB;AAClB,wBAA2B;AAC3B,4BAA2B;AAE3B,MAAM,eAAW,aAAAA,SAAM,eAAe;AAEtC,iBAAS,MAAM,qBAAqB,sBAAAC,QAAe;AAAA,EAGjD,YAAY,MAAc,UAAkB,OAAe,UAAoB,WAAoC;AACjH,aAAS,2BAA2B,SAAS,MAAM,aAAa,QAAQ;AACxE,UAAM,KAAK;AACX,SAAK,UAAU,IAAI,6BAAW,EAAE,MAAM,UAAU,UAAU,MAAM,CAAC;AACjE,QAAI;AAAU,WAAK,YAAY;AAC/B,QAAI;AAAW,WAAK,QAAQ,GAAG,QAAQ,SAAS;AAChD,SAAK,QAAQ,KAAK,KAAK,eAAe;AAAA,EACxC;AAAA,EAEA,OAAsB;AACpB,WAAO,IAAI,QAAc,CAAC,SAAS,WAAW;AAC5C,WAAK,QAAQ;AAAA,SACV,CAAC,QAAa;AACb,cAAI,KAAK;AACP,oBAAQ,IAAI,GAAG;AACf,mBAAO,GAAG;AAAA,UACZ,OAAO;AACL,iBAAK,WAAW;AAChB,oBAAQ;AAAA,UACV;AAAA,QACF,GAAG,KAAK,IAAI;AAAA,MACd;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,UAAU,MAAoB;AAC5B,aAAS,2BAA2B,SAAS,KAAK,SAAS,KAAK,GAAG,oBAAoB,KAAK,UAAU;AACtG,SAAK,QAAQ,MAAM,IAAI;AAAA,EACzB;AAAA,EAEA,SAAS,MAA6B;AACpC,aAAS,2BAA2B,SAAS,MAAM,oBAAoB,KAAK,UAAU;AACtF,SAAK,QAAQ,MAAM,IAAI;AAAA,EACzB;AAAA,EAEA,QAA0B;AACxB,aAAS,sBAAsB;AAC/B,WAAO,IAAI,QAAiB,aAAW;AACrC,WAAK,QAAQ,MAAM,MAAM;AACvB,gBAAQ,IAAI;AAAA,MACd,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;",
  "names": ["Debug", "WorkerAbstract"]
}
