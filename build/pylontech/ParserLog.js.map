{
  "version": 3,
  "sources": ["../../src/pylontech/ParserLog.ts"],
  "sourcesContent": ["import ParserBase from \"./ParserBase\";\n\n//const debugApi = Debug(\"pylontech:api\");\n\nconst COMMAND: string = \"log\";\n\nexport class ParserLog extends ParserBase {\n    protected _noConvertKeys: string[] = [\"Code\"];\n\n    isParser(data: string): boolean {\n        const prompt: RegExp = /(>)(\\S+)$/gm;\n        return this._isParser(data, prompt, COMMAND);\n    }\n\n    parseData(data: string): any {\n        const row: RegExp = /(.+\\S)\\s+:\\s(.*)/gm;\n        return this._parseNameValMultiData(data, row, COMMAND, \"Index\");\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAuB;AAIvB,MAAM,UAAkB;AAEjB,MAAM,kBAAkB,kBAAAA,QAAW;AAAA,EAAnC;AAAA;AACH,SAAU,iBAA2B,CAAC,MAAM;AAAA;AAAA,EAE5C,SAAS,MAAuB;AAC5B,UAAM,SAAiB;AACvB,WAAO,KAAK,UAAU,MAAM,QAAQ,OAAO;AAAA,EAC/C;AAAA,EAEA,UAAU,MAAmB;AACzB,UAAM,MAAc;AACpB,WAAO,KAAK,uBAAuB,MAAM,KAAK,SAAS,OAAO;AAAA,EAClE;AACJ;",
  "names": ["ParserBase"]
}
