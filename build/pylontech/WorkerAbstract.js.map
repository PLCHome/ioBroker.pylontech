{
  "version": 3,
  "sources": ["../../src/pylontech/WorkerAbstract.ts"],
  "sourcesContent": ["import debug from \"debug\";\nimport { CommandList } from \"./CommandList\";\nimport { ConsolenReader } from \"./ConsolenReader\";\nimport { IParser } from \"./IParser\";\nimport { IWorker } from \"./IWorker\";\nimport { Parsers } from \"./Parsers\";\nimport { Value } from \"./Value\";\n\nconst debugApi = debug(\"pylontech:api\");\n\ntype resultForGet = { batteries: string[]; batterienames: any; allData: any };\n\nconst PWR = \"pwr\";\nconst POWER = \"power\";\nconst STAT = \"stat\";\nconst STATISTIC = \"statistic\";\nconst BAT = \"bat\";\nconst SOH = \"soh\";\nconst INFO = \"info\";\n\nabstract class WorkerAbstract implements IWorker {\n    protected _consolenReader: ConsolenReader = new ConsolenReader();\n    protected _commands: CommandList[] = [];\n    protected _activeCmd: CommandList | undefined;\n    protected _timeout: number = 5000;\n    protected _started: boolean = false;\n    protected _parser: Parsers = new Parsers();\n\n    constructor() {\n        debugApi(\"MyWorkerAbstract.constructor\");\n        this._consolenReader.on(\"data\", this._onData.bind(this));\n        this._consolenReader.on(\"needsenddata\", this.sendData.bind(this));\n    }\n\n    protected _onData(data: Buffer): void {\n        const dataString = data.toString();\n        debugApi(\"MyWorkerAbstract._onData\", \"data:\", dataString, \"this._activeCmd:\", this._activeCmd);\n        const parser: IParser | undefined = this._parser.getParser(dataString);\n        let result: any = {};\n        if (parser !== undefined) {\n            result = parser.parseData(dataString);\n        }\n        if (this._activeCmd) {\n            clearTimeout(this._activeCmd.timeout);\n            this._activeCmd.resolve(result);\n            this._activeCmd = undefined;\n        }\n        this._nextcommand();\n    }\n\n    protected _nextcommand(): void {\n        debugApi(\"MyWorkerAbstract._nextcommand\", \"this._activeCmd:\", this._activeCmd, \"this._started:\", this._started);\n        if (!this._activeCmd && this._started) {\n            this._activeCmd = this._commands.shift();\n            if (this._activeCmd) {\n                this.sendData(this._activeCmd.cmd + \"\\r\");\n                this._activeCmd.timeout = setTimeout(this._ontimeout.bind(this), this._timeout);\n            }\n        }\n    }\n\n    protected _ontimeout(): void {\n        debugApi(\"MyWorkerAbstract._ontimeout\", \"this._activeCmd:\", this._activeCmd);\n        if (this._activeCmd) {\n            this._activeCmd.reject(new Error(\"timeout\"));\n            this._activeCmd = undefined;\n            this._consolenReader._flush(() => {\n                this._nextcommand();\n            });\n        }\n    }\n\n    protected _connected(): void {\n        debugApi(\"MyWorkerAbstract._connected\", \"this._activeCmd:\", this._activeCmd);\n        this.sendData(\"\\r\\n\");\n        this._started = true;\n        this._nextcommand();\n    }\n\n    public sendCommand(cmd: string): Promise<any> {\n        debugApi(\"MyWorkerAbstract.sendCommand\", \"cmd:\", cmd);\n        return new Promise<any>((resolve, reject) => {\n            this._commands.push({ cmd, resolve, reject, timeout: undefined });\n            this._nextcommand();\n        });\n    }\n\n    abstract sendData(data: string): void;\n\n    abstract close(): Promise<boolean>;\n\n    protected async _getAlldata(batteries: string[], cmd: string): Promise<any> {\n        return new Promise<any>((resolve, reject) => {\n            const promises: Promise<any>[] = [];\n            batteries.forEach((bat: string) => {\n                promises.push(this.sendCommand(`${cmd} ${bat}`));\n            });\n            Promise.all(promises)\n                .then((vals: any[]) => {\n                    let all: any = {};\n                    vals.forEach((val) => {\n                        all = Object.assign(all, val);\n                    });\n                    resolve(all);\n                })\n                .catch(reject);\n        });\n    }\n\n    protected async _getPwr(): Promise<{ pwrs: any; batteries: string[] }> {\n        return new Promise<{ pwrs: any; batteries: string[] }>((resolve, reject) => {\n            this.sendCommand(PWR)\n                .then((pwrs) => {\n                    const batteries: string[] = [];\n                    if (pwrs && pwrs.pwr) {\n                        const pwr: any = pwrs.pwr;\n                        Object.keys(pwr).forEach((key: string) => {\n                            const pwrVal: any = pwr[key];\n                            if (pwrVal.basest instanceof Value) {\n                                const pwrBase: Value = pwrVal.basest;\n                                if (pwrBase.value !== \"Absent\") {\n                                    batteries.push(key);\n                                }\n                            }\n                        });\n                    }\n                    resolve({ pwrs, batteries });\n                })\n                .catch(reject);\n        });\n    }\n\n    protected async _getinfo(p: { pwrs: any; batteries: string[] }): Promise<resultForGet> {\n        return new Promise<resultForGet>((resolve, reject) => {\n            this._getAlldata(p.batteries, INFO)\n                .then((infos: any) => {\n                    const allData: any = {};\n                    const batterienames: any = {};\n                    Object.keys(infos).forEach((key: string) => {\n                        if (infos[key].info && infos[key].info.barcode && infos[key].info.barcode instanceof Value) {\n                            batterienames[key] = infos[key].info.barcode.value;\n                            allData[infos[key].info.barcode.value] = infos[key];\n                            delete allData[infos[key].info.barcode.value].info.barcode;\n                        }\n                    });\n                    p.batteries.forEach((bat: any) => {\n                        if (batterienames[bat]) {\n                            allData[batterienames[bat]].power = allData[batterienames[bat]].power\n                                ? Object.assign(allData[batterienames[bat]].power, p.pwrs.pwr[bat])\n                                : p.pwrs.pwr[bat];\n                            allData[`info.${bat}`] = {\n                                barcode: new Value(batterienames[bat], \"string\", \"\", \"Barcode\"),\n                                connected: new Value(true, \"boolean\", \"\", \"Connected\"),\n                            };\n                        }\n                    });\n                    resolve({ batteries: p.batteries, batterienames, allData });\n                })\n                .catch(reject);\n        });\n    }\n\n    protected async _getNormal(p: resultForGet, what: string, to: string): Promise<resultForGet> {\n        return new Promise<resultForGet>((resolve, reject) => {\n            this._getAlldata(p.batteries, what)\n                .then((data: any) => {\n                    Object.keys(data).forEach((key: string) => {\n                        if (p.batterienames[key] && p.allData[p.batterienames[key]] && data[key][what]) {\n                            p.allData[p.batterienames[key]][to] = p.allData[p.batterienames[key]][to]\n                                ? Object.assign(p.allData[p.batterienames[key]].power, data[key][what])\n                                : data[key][what];\n                        }\n                    });\n                    resolve({ batteries: p.batteries, batterienames: p.batterienames, allData: p.allData });\n                })\n                .catch(reject);\n        });\n    }\n\n    protected async _getBatterie(p: resultForGet, what: string): Promise<resultForGet> {\n        return new Promise<resultForGet>((resolve, reject) => {\n            this._getAlldata(p.batteries, what)\n                .then((data: any) => {\n                    Object.keys(data).forEach((key: string) => {\n                        if (p.batterienames[key] && data[key][what]) {\n                            Object.keys(data[key][what]).forEach((batnr: string) => {\n                                const batkey = `battery${(parseInt(batnr, 10) + 1).toString().padStart(2, \"0\")}`;\n                                p.allData[p.batterienames[key]][batkey] = p.allData[p.batterienames[key]][batkey]\n                                    ? Object.assign(p.allData[p.batterienames[key]][batkey], data[key][what][batnr])\n                                    : data[key][what][batnr];\n                            });\n                        }\n                    });\n                    resolve({ batteries: p.batteries, batterienames: p.batterienames, allData: p.allData });\n                })\n                .catch(reject);\n        });\n    }\n\n    protected async _getLog(allData: any): Promise<any> {\n        return new Promise<any>((resolve, reject) => {\n            this.sendCommand(\"log\")\n                .then((log) => {\n                    if (log.log) {\n                        allData.log = log.log;\n                    }\n                    resolve(allData);\n                })\n                .catch(reject);\n        });\n    }\n\n    public async getData(): Promise<any> {\n        return new Promise<any>((resolve, reject) => {\n            this._getPwr()\n                .then((p: { pwrs: any; batteries: string[] }) => {\n                    this._getinfo(p)\n                        .then((p: resultForGet) => {\n                            this._getNormal(p, PWR, POWER)\n                                .then((p) => {\n                                    this._getNormal(p, STAT, STATISTIC)\n                                        .then((p) => {\n                                            this._getBatterie(p, BAT)\n                                                .then((p) => {\n                                                    this._getBatterie(p, SOH)\n                                                        .then((p) => {\n                                                            this._getLog(p.allData)\n                                                                .then((allData) => {\n                                                                    resolve(allData);\n                                                                })\n                                                                .catch(reject);\n                                                        })\n                                                        .catch(reject);\n                                                })\n                                                .catch(reject);\n                                        })\n                                        .catch(reject);\n                                })\n                                .catch(reject);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n}\nexport = WorkerAbstract;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,mBAAkB;AAElB,4BAA+B;AAG/B,qBAAwB;AACxB,mBAAsB;AAEtB,MAAM,eAAW,aAAAA,SAAM,eAAe;AAItC,MAAM,MAAM;AACZ,MAAM,QAAQ;AACd,MAAM,OAAO;AACb,MAAM,YAAY;AAClB,MAAM,MAAM;AACZ,MAAM,MAAM;AACZ,MAAM,OAAO;AAEb,MAAe,eAAkC;AAAA,EAQ7C,cAAc;AAPd,SAAU,kBAAkC,IAAI,qCAAe;AAC/D,SAAU,YAA2B,CAAC;AAEtC,SAAU,WAAmB;AAC7B,SAAU,WAAoB;AAC9B,SAAU,UAAmB,IAAI,uBAAQ;AAGrC,aAAS,8BAA8B;AACvC,SAAK,gBAAgB,GAAG,QAAQ,KAAK,QAAQ,KAAK,IAAI,CAAC;AACvD,SAAK,gBAAgB,GAAG,gBAAgB,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EACpE;AAAA,EAEU,QAAQ,MAAoB;AAClC,UAAM,aAAa,KAAK,SAAS;AACjC,aAAS,4BAA4B,SAAS,YAAY,oBAAoB,KAAK,UAAU;AAC7F,UAAM,SAA8B,KAAK,QAAQ,UAAU,UAAU;AACrE,QAAI,SAAc,CAAC;AACnB,QAAI,WAAW,QAAW;AACtB,eAAS,OAAO,UAAU,UAAU;AAAA,IACxC;AACA,QAAI,KAAK,YAAY;AACjB,mBAAa,KAAK,WAAW,OAAO;AACpC,WAAK,WAAW,QAAQ,MAAM;AAC9B,WAAK,aAAa;AAAA,IACtB;AACA,SAAK,aAAa;AAAA,EACtB;AAAA,EAEU,eAAqB;AAC3B,aAAS,iCAAiC,oBAAoB,KAAK,YAAY,kBAAkB,KAAK,QAAQ;AAC9G,QAAI,CAAC,KAAK,cAAc,KAAK,UAAU;AACnC,WAAK,aAAa,KAAK,UAAU,MAAM;AACvC,UAAI,KAAK,YAAY;AACjB,aAAK,SAAS,KAAK,WAAW,MAAM,IAAI;AACxC,aAAK,WAAW,UAAU,WAAW,KAAK,WAAW,KAAK,IAAI,GAAG,KAAK,QAAQ;AAAA,MAClF;AAAA,IACJ;AAAA,EACJ;AAAA,EAEU,aAAmB;AACzB,aAAS,+BAA+B,oBAAoB,KAAK,UAAU;AAC3E,QAAI,KAAK,YAAY;AACjB,WAAK,WAAW,OAAO,IAAI,MAAM,SAAS,CAAC;AAC3C,WAAK,aAAa;AAClB,WAAK,gBAAgB,OAAO,MAAM;AAC9B,aAAK,aAAa;AAAA,MACtB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEU,aAAmB;AACzB,aAAS,+BAA+B,oBAAoB,KAAK,UAAU;AAC3E,SAAK,SAAS,MAAM;AACpB,SAAK,WAAW;AAChB,SAAK,aAAa;AAAA,EACtB;AAAA,EAEO,YAAY,KAA2B;AAC1C,aAAS,gCAAgC,QAAQ,GAAG;AACpD,WAAO,IAAI,QAAa,CAAC,SAAS,WAAW;AACzC,WAAK,UAAU,KAAK,EAAE,KAAK,SAAS,QAAQ,SAAS,OAAU,CAAC;AAChE,WAAK,aAAa;AAAA,IACtB,CAAC;AAAA,EACL;AAAA,EAMA,MAAgB,YAAY,WAAqB,KAA2B;AACxE,WAAO,IAAI,QAAa,CAAC,SAAS,WAAW;AACzC,YAAM,WAA2B,CAAC;AAClC,gBAAU,QAAQ,CAAC,QAAgB;AAC/B,iBAAS,KAAK,KAAK,YAAY,GAAG,OAAO,KAAK,CAAC;AAAA,MACnD,CAAC;AACD,cAAQ,IAAI,QAAQ,EACf,KAAK,CAAC,SAAgB;AACnB,YAAI,MAAW,CAAC;AAChB,aAAK,QAAQ,CAAC,QAAQ;AAClB,gBAAM,OAAO,OAAO,KAAK,GAAG;AAAA,QAChC,CAAC;AACD,gBAAQ,GAAG;AAAA,MACf,CAAC,EACA,MAAM,MAAM;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EAEA,MAAgB,UAAuD;AACnE,WAAO,IAAI,QAA4C,CAAC,SAAS,WAAW;AACxE,WAAK,YAAY,GAAG,EACf,KAAK,CAAC,SAAS;AACZ,cAAM,YAAsB,CAAC;AAC7B,YAAI,QAAQ,KAAK,KAAK;AAClB,gBAAM,MAAW,KAAK;AACtB,iBAAO,KAAK,GAAG,EAAE,QAAQ,CAAC,QAAgB;AACtC,kBAAM,SAAc,IAAI;AACxB,gBAAI,OAAO,kBAAkB,oBAAO;AAChC,oBAAM,UAAiB,OAAO;AAC9B,kBAAI,QAAQ,UAAU,UAAU;AAC5B,0BAAU,KAAK,GAAG;AAAA,cACtB;AAAA,YACJ;AAAA,UACJ,CAAC;AAAA,QACL;AACA,gBAAQ,EAAE,MAAM,UAAU,CAAC;AAAA,MAC/B,CAAC,EACA,MAAM,MAAM;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EAEA,MAAgB,SAAS,GAA8D;AACnF,WAAO,IAAI,QAAsB,CAAC,SAAS,WAAW;AAClD,WAAK,YAAY,EAAE,WAAW,IAAI,EAC7B,KAAK,CAAC,UAAe;AAClB,cAAM,UAAe,CAAC;AACtB,cAAM,gBAAqB,CAAC;AAC5B,eAAO,KAAK,KAAK,EAAE,QAAQ,CAAC,QAAgB;AACxC,cAAI,MAAM,KAAK,QAAQ,MAAM,KAAK,KAAK,WAAW,MAAM,KAAK,KAAK,mBAAmB,oBAAO;AACxF,0BAAc,OAAO,MAAM,KAAK,KAAK,QAAQ;AAC7C,oBAAQ,MAAM,KAAK,KAAK,QAAQ,SAAS,MAAM;AAC/C,mBAAO,QAAQ,MAAM,KAAK,KAAK,QAAQ,OAAO,KAAK;AAAA,UACvD;AAAA,QACJ,CAAC;AACD,UAAE,UAAU,QAAQ,CAAC,QAAa;AAC9B,cAAI,cAAc,MAAM;AACpB,oBAAQ,cAAc,MAAM,QAAQ,QAAQ,cAAc,MAAM,QAC1D,OAAO,OAAO,QAAQ,cAAc,MAAM,OAAO,EAAE,KAAK,IAAI,IAAI,IAChE,EAAE,KAAK,IAAI;AACjB,oBAAQ,QAAQ,SAAS;AAAA,cACrB,SAAS,IAAI,mBAAM,cAAc,MAAM,UAAU,IAAI,SAAS;AAAA,cAC9D,WAAW,IAAI,mBAAM,MAAM,WAAW,IAAI,WAAW;AAAA,YACzD;AAAA,UACJ;AAAA,QACJ,CAAC;AACD,gBAAQ,EAAE,WAAW,EAAE,WAAW,eAAe,QAAQ,CAAC;AAAA,MAC9D,CAAC,EACA,MAAM,MAAM;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EAEA,MAAgB,WAAW,GAAiB,MAAc,IAAmC;AACzF,WAAO,IAAI,QAAsB,CAAC,SAAS,WAAW;AAClD,WAAK,YAAY,EAAE,WAAW,IAAI,EAC7B,KAAK,CAAC,SAAc;AACjB,eAAO,KAAK,IAAI,EAAE,QAAQ,CAAC,QAAgB;AACvC,cAAI,EAAE,cAAc,QAAQ,EAAE,QAAQ,EAAE,cAAc,SAAS,KAAK,KAAK,OAAO;AAC5E,cAAE,QAAQ,EAAE,cAAc,MAAM,MAAM,EAAE,QAAQ,EAAE,cAAc,MAAM,MAChE,OAAO,OAAO,EAAE,QAAQ,EAAE,cAAc,MAAM,OAAO,KAAK,KAAK,KAAK,IACpE,KAAK,KAAK;AAAA,UACpB;AAAA,QACJ,CAAC;AACD,gBAAQ,EAAE,WAAW,EAAE,WAAW,eAAe,EAAE,eAAe,SAAS,EAAE,QAAQ,CAAC;AAAA,MAC1F,CAAC,EACA,MAAM,MAAM;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EAEA,MAAgB,aAAa,GAAiB,MAAqC;AAC/E,WAAO,IAAI,QAAsB,CAAC,SAAS,WAAW;AAClD,WAAK,YAAY,EAAE,WAAW,IAAI,EAC7B,KAAK,CAAC,SAAc;AACjB,eAAO,KAAK,IAAI,EAAE,QAAQ,CAAC,QAAgB;AACvC,cAAI,EAAE,cAAc,QAAQ,KAAK,KAAK,OAAO;AACzC,mBAAO,KAAK,KAAK,KAAK,KAAK,EAAE,QAAQ,CAAC,UAAkB;AACpD,oBAAM,SAAS,WAAW,SAAS,OAAO,EAAE,IAAI,GAAG,SAAS,EAAE,SAAS,GAAG,GAAG;AAC7E,gBAAE,QAAQ,EAAE,cAAc,MAAM,UAAU,EAAE,QAAQ,EAAE,cAAc,MAAM,UACpE,OAAO,OAAO,EAAE,QAAQ,EAAE,cAAc,MAAM,SAAS,KAAK,KAAK,MAAM,MAAM,IAC7E,KAAK,KAAK,MAAM;AAAA,YAC1B,CAAC;AAAA,UACL;AAAA,QACJ,CAAC;AACD,gBAAQ,EAAE,WAAW,EAAE,WAAW,eAAe,EAAE,eAAe,SAAS,EAAE,QAAQ,CAAC;AAAA,MAC1F,CAAC,EACA,MAAM,MAAM;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EAEA,MAAgB,QAAQ,SAA4B;AAChD,WAAO,IAAI,QAAa,CAAC,SAAS,WAAW;AACzC,WAAK,YAAY,KAAK,EACjB,KAAK,CAAC,QAAQ;AACX,YAAI,IAAI,KAAK;AACT,kBAAQ,MAAM,IAAI;AAAA,QACtB;AACA,gBAAQ,OAAO;AAAA,MACnB,CAAC,EACA,MAAM,MAAM;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EAEA,MAAa,UAAwB;AACjC,WAAO,IAAI,QAAa,CAAC,SAAS,WAAW;AACzC,WAAK,QAAQ,EACR,KAAK,CAAC,MAA0C;AAC7C,aAAK,SAAS,CAAC,EACV,KAAK,CAACC,OAAoB;AACvB,eAAK,WAAWA,IAAG,KAAK,KAAK,EACxB,KAAK,CAACA,OAAM;AACT,iBAAK,WAAWA,IAAG,MAAM,SAAS,EAC7B,KAAK,CAACA,OAAM;AACT,mBAAK,aAAaA,IAAG,GAAG,EACnB,KAAK,CAACA,OAAM;AACT,qBAAK,aAAaA,IAAG,GAAG,EACnB,KAAK,CAACA,OAAM;AACT,uBAAK,QAAQA,GAAE,OAAO,EACjB,KAAK,CAAC,YAAY;AACf,4BAAQ,OAAO;AAAA,kBACnB,CAAC,EACA,MAAM,MAAM;AAAA,gBACrB,CAAC,EACA,MAAM,MAAM;AAAA,cACrB,CAAC,EACA,MAAM,MAAM;AAAA,YACrB,CAAC,EACA,MAAM,MAAM;AAAA,UACrB,CAAC,EACA,MAAM,MAAM;AAAA,QACrB,CAAC,EACA,MAAM,MAAM;AAAA,MACrB,CAAC,EACA,MAAM,MAAM;AAAA,IACrB,CAAC;AAAA,EACL;AACJ;AACA,iBAAS;",
  "names": ["debug", "p"]
}
