{
  "version": 3,
  "sources": ["../../src/pylontech/WorkerAbstract.ts"],
  "sourcesContent": ["// Copyright (c) 2020-2023 Tr\u00E4ger\n\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\nimport debug from 'debug';\nimport { CommandList } from './CommandList';\nimport { ConsolenReader } from './ConsolenReader';\nimport { IParser } from './IParser';\nimport { IWorker } from './IWorker';\nimport { Parsers } from './Parsers';\nimport { Value } from './Value';\n\nconst debugApi = debug('pylontech:api');\n\ntype resultForGet = { batteries: string[]; batterienames: any; allData: any };\n\nconst PWR = 'pwr';\nconst POWER = 'power';\nconst STAT = 'stat';\nconst STATISTIC = 'statistic';\nconst BAT = 'bat';\nconst SOH = 'soh';\nconst INFO = 'info';\nconst LOG = 'log';\nconst TIME = 'time';\nconst CELLS = 'cells';\nconst SYSTEMINFO = 'systeminfo';\nconst SYSINFO = 'sysinfo';\nconst UNIT = 'unit';\n\nabstract class WorkerAbstract implements IWorker {\n  protected _consolenReader: ConsolenReader = new ConsolenReader();\n  protected _commands: CommandList[] = [];\n  protected _activeCmd: CommandList | undefined;\n  protected _timeout: number = 5000;\n  protected _started: boolean = false;\n  protected _parsers: Parsers;\n  protected _noPrompt: boolean = false;\n  protected _model: string;\n\n  constructor(model: string) {\n    debugApi('MyWorkerAbstract.constructor');\n    this._model = model;\n    this._parsers = new Parsers(model);\n    this._consolenReader.on('data', this._onData.bind(this));\n    this._consolenReader.on('needsenddata', this.sendData.bind(this));\n  }\n\n  protected _onData(data: Buffer): void {\n    const dataString = data.toString();\n    debugApi('MyWorkerAbstract._onData', 'data:', dataString, 'this._activeCmd:', this._activeCmd);\n    const parser: IParser | undefined = this._parsers.getParser();\n    let result: any = {};\n    if (parser !== undefined) {\n      result = parser.parseData(dataString);\n    }\n    if (this._activeCmd) {\n      clearTimeout(this._activeCmd.timeout);\n      this._activeCmd.resolve(result);\n      this._activeCmd = undefined;\n    }\n    this._nextcommand();\n  }\n\n  protected _nextcommand(): void {\n    debugApi('MyWorkerAbstract._nextcommand', 'this._activeCmd:', this._activeCmd, 'this._started:', this._started);\n    if (!this._activeCmd && this._started) {\n      this._activeCmd = this._commands.shift();\n      if (this._activeCmd) {\n        this._parsers.setCMD(this._activeCmd.cmd);\n        this.sendData(this._activeCmd.cmd + '\\r');\n        this._activeCmd.timeout = setTimeout(this._ontimeout.bind(this), this._timeout);\n      }\n    }\n  }\n\n  protected _ontimeout(): void {\n    debugApi('MyWorkerAbstract._ontimeout', 'this._activeCmd:', this._activeCmd);\n    if (this._activeCmd) {\n      this._activeCmd.reject(new Error('timeout'));\n      this._activeCmd = undefined;\n      this._consolenReader._flush(() => {\n        this._nextcommand();\n      });\n    }\n  }\n\n  protected _connected(): void {\n    debugApi('MyWorkerAbstract._connected', 'this._activeCmd:', this._activeCmd);\n    if (!this._noPrompt) {\n      this.sendData('\\r\\n');\n    }\n    this._started = true;\n    this._nextcommand();\n  }\n\n  public sendCommand(cmd: string): Promise<any> {\n    debugApi('MyWorkerAbstract.sendCommand', 'cmd:', cmd);\n    return new Promise<any>((resolve, reject) => {\n      this._commands.push({ cmd, resolve, reject, timeout: undefined });\n      this._nextcommand();\n    });\n  }\n\n  public sendSpeedInit(): Promise<void> {\n    debugApi('MyWorkerAbstract.sendSpeedInit');\n    return new Promise<void>((resolve, reject) => {\n      try {\n        const setSpeed = Buffer.from('7E32303031343638324330303438353230464343330D', 'hex');\n        this.sendDataB(setSpeed);\n        setTimeout(() => {\n          resolve();\n        }, 1000);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  abstract sendDataB(data: Buffer): void;\n\n  abstract sendData(data: string): void;\n\n  abstract open(): Promise<void>;\n\n  abstract close(): Promise<boolean>;\n\n  protected async _getAlldata(batteries: string[], cmd: string): Promise<any> {\n    return new Promise<any>((resolve, reject) => {\n      const promises: Promise<any>[] = [];\n      batteries.forEach((bat: string) => {\n        promises.push(this.sendCommand(`${cmd} ${bat}`));\n      });\n      Promise.all(promises)\n        .then((vals: any[]) => {\n          let all: any = {};\n          vals.forEach(val => {\n            all = Object.assign(all, val);\n          });\n          resolve(all);\n        })\n        .catch(reject);\n    });\n  }\n\n  protected async _getUsPwr(): Promise<{ pwrs: any; batteries: string[] }> {\n    return new Promise<{ pwrs: any; batteries: string[] }>((resolve, reject) => {\n      this.sendCommand(PWR)\n        .then(pwrs => {\n          const batteries: string[] = [];\n          if (pwrs && pwrs.pwr) {\n            const pwr: any = pwrs.pwr;\n            Object.keys(pwr).forEach((key: string) => {\n              const pwrVal: any = pwr[key];\n              if (pwrVal.basest instanceof Value) {\n                const pwrBase: Value = pwrVal.basest;\n                if (pwrBase.value !== 'Absent') {\n                  batteries.push(key);\n                }\n              }\n            });\n          }\n          resolve({ pwrs, batteries });\n        })\n        .catch(reject);\n    });\n  }\n\n  protected async _getUsInfo(p: { pwrs: any; batteries: string[] }, info: boolean, power: boolean): Promise<resultForGet> {\n    return new Promise<resultForGet>((resolve, reject) => {\n      this._getAlldata(p.batteries, INFO)\n        .then((infos: any) => {\n          const allData: any = {};\n          const batterienames: any = {};\n          Object.keys(infos).forEach((key: string) => {\n            if (infos[key].info && infos[key].info.barcode && infos[key].info.barcode instanceof Value) {\n              batterienames[key] = infos[key].info.barcode.value;\n              if (info) {\n                allData[infos[key].info.barcode.value] = infos[key];\n                delete allData[infos[key].info.barcode.value].info.barcode;\n              }\n            }\n          });\n          p.batteries.forEach((bat: any) => {\n            if (batterienames[bat]) {\n              if (power) {\n                allData[batterienames[bat]].power = allData[batterienames[bat]].power\n                  ? Object.assign(allData[batterienames[bat]].power, p.pwrs.pwr[bat])\n                  : p.pwrs.pwr[bat];\n              }\n              if (!allData.info) allData.info = {};\n              allData.info[`${bat}`] = {\n                barcode: new Value(batterienames[bat], 'string', '', 'Barcode'),\n                connected: new Value(true, 'boolean', '', 'Connected'),\n              };\n            }\n          });\n          resolve({ batteries: p.batteries, batterienames, allData });\n        })\n        .catch(reject);\n    });\n  }\n\n  protected async _getUsNormal(p: resultForGet, what: string, to: string, process: boolean): Promise<resultForGet> {\n    return new Promise<resultForGet>((resolve, reject) => {\n      if (process) {\n        this._getAlldata(p.batteries, what)\n          .then((data: any) => {\n            Object.keys(data).forEach((key: string) => {\n              if (p.batterienames[key] && p.allData[p.batterienames[key]] && data[key][what]) {\n                p.allData[p.batterienames[key]][to] = p.allData[p.batterienames[key]][to]\n                  ? Object.assign(p.allData[p.batterienames[key]].power, data[key][what])\n                  : data[key][what];\n              }\n            });\n            resolve(p);\n          })\n          .catch(reject);\n      } else {\n        resolve(p);\n      }\n    });\n  }\n\n  protected async _getUsBatterie(p: resultForGet, what: string, process: boolean): Promise<resultForGet> {\n    return new Promise<resultForGet>((resolve, reject) => {\n      if (process) {\n        this._getAlldata(p.batteries, what)\n          .then((data: any) => {\n            Object.keys(data).forEach((key: string) => {\n              if (p.batterienames[key] && data[key][what]) {\n                Object.keys(data[key][what]).forEach((batnr: string) => {\n                  const batkey = `battery${(parseInt(batnr, 10) + 1).toString().padStart(2, '0')}`;\n                  p.allData[p.batterienames[key]][batkey] = p.allData[p.batterienames[key]][batkey]\n                    ? Object.assign(p.allData[p.batterienames[key]][batkey], data[key][what][batnr])\n                    : data[key][what][batnr];\n                });\n              }\n            });\n            resolve(p);\n          })\n          .catch(reject);\n      } else {\n        resolve(p);\n      }\n    });\n  }\n\n  protected async _getOne(allData: any, what: string, name: string, process: boolean): Promise<any> {\n    return new Promise<any>((resolve, reject) => {\n      if (process) {\n        this.sendCommand(what)\n          .then(data => {\n            if (data[what]) {\n              if (allData[name]) {\n                function copy(to: any, from: any): void {\n                  Object.keys(from).forEach(key => {\n                    if (to[key]) {\n                      copy(to[key], from[key]);\n                    } else {\n                      to[key] = from[key];\n                    }\n                  });\n                }\n                copy(allData[name], data[what]);\n              } else {\n                allData[name] = data[what];\n              }\n            }\n            resolve(allData);\n          })\n          .catch(reject);\n      } else {\n        resolve(allData);\n      }\n    });\n  }\n\n  protected _getDataUS(option: any): Promise<any> {\n    return new Promise<any>((resolve, reject) => {\n      this._getUsPwr()\n        .then((p: { pwrs: any; batteries: string[] }) => {\n          this._getUsInfo(p, option.info, option.power)\n            .then((p: resultForGet) => {\n              this._getUsNormal(p, PWR, POWER, option.power)\n                .then(p => {\n                  this._getUsNormal(p, STAT, STATISTIC, option.statistic)\n                    .then(p => {\n                      this._getUsBatterie(p, BAT, option.celldata)\n                        .then(p => {\n                          this._getUsBatterie(p, SOH, option.cellsoh)\n                            .then(p => {\n                              this._getOne(p.allData, LOG, LOG, option.log)\n                                .then(allData => {\n                                  this._getOne(allData, TIME, TIME, option.time)\n                                    .then(allData => {\n                                      resolve(allData);\n                                    })\n                                    .catch(reject);\n                                })\n                                .catch(reject);\n                            })\n                            .catch(reject);\n                        })\n                        .catch(reject);\n                    })\n                    .catch(reject);\n                })\n                .catch(reject);\n            })\n            .catch(reject);\n        })\n        .catch(reject);\n    });\n  }\n\n  protected _getDataFORCE(option: any): Promise<any> {\n    return new Promise<any>((resolve, reject) => {\n      this._getOne({}, INFO, INFO, option.info)\n        .then(allData => {\n          this._getOne(allData, SYSINFO, SYSTEMINFO, option.sysinfo)\n            .then(allData => {\n              this._getOne(allData, PWR, POWER, option.power)\n                .then(allData => {\n                  this._getOne(allData, UNIT, UNIT, option.unit)\n                    .then(allData => {\n                      this._getOne(allData, STAT, STATISTIC, option.statistic)\n                        .then(allData => {\n                          this._getOne(allData, BAT, CELLS, option.celldata)\n                            .then(allData => {\n                              this._getOne(allData, SOH, CELLS, option.cellsoh)\n                                .then(allData => {\n                                  this._getOne(allData, LOG, LOG, option.log)\n                                    .then(allData => {\n                                      this._getOne(allData, TIME, TIME, option.time)\n                                        .then(allData => {\n                                          if (!allData.info) {\n                                            allData.info = {};\n                                          }\n                                          allData.info['1'] = {\n                                            connected: new Value(true, 'boolean', '', 'Connected'),\n                                          };\n                                          resolve(allData);\n                                        })\n                                        .catch(reject);\n                                    })\n                                    .catch(reject);\n                                })\n                                .catch(reject);\n                            })\n                            .catch(reject);\n                        })\n                        .catch(reject);\n                    })\n                    .catch(reject);\n                })\n                .catch(reject);\n            })\n            .catch(reject);\n        })\n        .catch(reject);\n    });\n  }\n\n  public getData(option: any): Promise<any> {\n    if (typeof option.info == 'undefined') option.info = true;\n    if (typeof option.power == 'undefined') option.power = true;\n    if (typeof option.unit == 'undefined') option.unit = true;\n    if (typeof option.statistic == 'undefined') option.statistic = true;\n    if (typeof option.celldata == 'undefined') option.celldata = true;\n    if (typeof option.cellsoh == 'undefined') option.cellsoh = true;\n    if (typeof option.log == 'undefined') option.log = true;\n    if (typeof option.time == 'undefined') option.time = true;\n    return this._model == 'FORCE' ? this._getDataFORCE(option) : this._getDataUS(option);\n  }\n}\nexport = WorkerAbstract;\n"],
  "mappings": "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",
  "names": ["debug", "copy", "p", "allData"]
}
