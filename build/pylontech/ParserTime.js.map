{
  "version": 3,
  "sources": ["../../src/pylontech/ParserTime.ts"],
  "sourcesContent": ["// Copyright (c) 2020-2023 Tr\u00E4ger\n\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\nimport ParserBase from './ParserBase';\n\nconst COMMAND: string = 'time';\n\nexport class ParserTime extends ParserBase {\n  protected _noConvertKeys: string[] = ['Code'];\n\n  isParser(data: string): boolean {\n    const prompt: RegExp = /(>)(\\S+)$/gm;\n    return this._isParser(data, prompt, COMMAND);\n  }\n\n  parseData(data: string): any {\n    const row: RegExp = /(\\S+)\\s+(\\d{2,4}-[0-1]\\d-[0-3]\\d [0-2]\\d:[0-5]\\d:[0-5]\\d)/gm;\n    const result = this._parseDataNameValN(data, row, COMMAND);\n    Object.keys(result.time).forEach((key: string) => {\n      result.time[key].write = true;\n      result.time[key].function = 'settime';\n    });\n    return result;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA,wBAAuB;AAEvB,MAAM,UAAkB;AAEjB,MAAM,mBAAmB,kBAAAA,QAAW;AAAA,EAApC;AAAA;AACL,SAAU,iBAA2B,CAAC,MAAM;AAAA;AAAA,EAE5C,SAAS,MAAuB;AAC9B,UAAM,SAAiB;AACvB,WAAO,KAAK,UAAU,MAAM,QAAQ,OAAO;AAAA,EAC7C;AAAA,EAEA,UAAU,MAAmB;AAC3B,UAAM,MAAc;AACpB,UAAM,SAAS,KAAK,mBAAmB,MAAM,KAAK,OAAO;AACzD,WAAO,KAAK,OAAO,IAAI,EAAE,QAAQ,CAAC,QAAgB;AAChD,aAAO,KAAK,KAAK,QAAQ;AACzB,aAAO,KAAK,KAAK,WAAW;AAAA,IAC9B,CAAC;AACD,WAAO;AAAA,EACT;AACF;",
  "names": ["ParserBase"]
}
