{
  "version": 3,
  "sources": ["../../src/pylontech/WorkerNet.ts"],
  "sourcesContent": ["import Debug from 'debug';\nimport * as net from 'net';\nimport WorkerAbstract from './WorkerAbstract';\n\nconst debugApi = Debug('pylontech:api');\n\nexport = class WorkerNet extends WorkerAbstract {\n  protected _socket: net.Socket = new net.Socket();\n\n  constructor(host: string, port: number, baudRate: number, rfc2217: boolean, debugData?: (data: Buffer) => void) {\n    debugApi('MyWorkerNet.constructor', 'host:', host, 'port:', port);\n    super();\n    if (debugData) this._socket.on('data', debugData);\n    this._socket.pipe(this._consolenReader);\n    this._socket.connect(port, host, this._connected.bind(this));\n  }\n\n  protected _will(): void {\n    const data = Buffer.from('FFFB2C', 'hex');\n    this._sendDataB(data);\n  }\n\n  protected _setBaudRate(baudRate: number): void {\n    this._will();\n    const data = Buffer.from('fffa2c0100000000fff0', 'hex');\n    data.writeUInt32BE(baudRate, 4);\n    this._sendDataB(data);\n  }\n\n  protected _setDatasize(datasize: number): void {\n    this._will();\n    const data = Buffer.from('fffa2c0200fff0', 'hex');\n    data.writeUInt8(datasize, 4);\n    this._sendDataB(data);\n  }\n\n  protected _setParity(parity: number): void {\n    this._will();\n    const data = Buffer.from('fffa2c0300fff0', 'hex');\n    data.writeUInt8(parity, 4);\n    this._sendDataB(data);\n  }\n\n  protected _setStopsize(stopsize: number): void {\n    this._will();\n    const data = Buffer.from('fffa2c0400fff0', 'hex');\n    data.writeUInt8(stopsize, 4);\n    this._sendDataB(data);\n  }\n\n  protected _setControl(control: number): void {\n    this._will();\n    const data = Buffer.from('fffa2c0500fff0', 'hex');\n    data.writeUInt8(control, 4);\n    this._sendDataB(data);\n  }\n\n  _sendDataB(data: Buffer): void {\n    debugApi('MyWorkerNet.sendData', 'data:', data.toString('hex'), 'this._activeCmd:', this._activeCmd);\n    this._socket.write(data);\n  }\n\n  sendData(data: string): void {\n    debugApi('MyWorkerNet.sendData', 'data:', data, 'this._activeCmd:', this._activeCmd);\n    this._socket.write(data);\n  }\n\n  close(): Promise<boolean> {\n    debugApi('MyWorkerNet.close');\n    return new Promise<boolean>(resolve => {\n      this._socket.end(() => {\n        resolve(true);\n      });\n    });\n  }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,mBAAkB;AAClB,UAAqB;AACrB,4BAA2B;AAE3B,MAAM,eAAW,aAAAA,SAAM,eAAe;AAEtC,iBAAS,MAAM,kBAAkB,sBAAAC,QAAe;AAAA,EAG9C,YAAY,MAAc,MAAc,UAAkB,SAAkB,WAAoC;AAC9G,aAAS,2BAA2B,SAAS,MAAM,SAAS,IAAI;AAChE,UAAM;AAJR,SAAU,UAAsB,IAAI,IAAI,OAAO;AAK7C,QAAI;AAAW,WAAK,QAAQ,GAAG,QAAQ,SAAS;AAChD,SAAK,QAAQ,KAAK,KAAK,eAAe;AACtC,SAAK,QAAQ,QAAQ,MAAM,MAAM,KAAK,WAAW,KAAK,IAAI,CAAC;AAAA,EAC7D;AAAA,EAEU,QAAc;AACtB,UAAM,OAAO,OAAO,KAAK,UAAU,KAAK;AACxC,SAAK,WAAW,IAAI;AAAA,EACtB;AAAA,EAEU,aAAa,UAAwB;AAC7C,SAAK,MAAM;AACX,UAAM,OAAO,OAAO,KAAK,wBAAwB,KAAK;AACtD,SAAK,cAAc,UAAU,CAAC;AAC9B,SAAK,WAAW,IAAI;AAAA,EACtB;AAAA,EAEU,aAAa,UAAwB;AAC7C,SAAK,MAAM;AACX,UAAM,OAAO,OAAO,KAAK,kBAAkB,KAAK;AAChD,SAAK,WAAW,UAAU,CAAC;AAC3B,SAAK,WAAW,IAAI;AAAA,EACtB;AAAA,EAEU,WAAW,QAAsB;AACzC,SAAK,MAAM;AACX,UAAM,OAAO,OAAO,KAAK,kBAAkB,KAAK;AAChD,SAAK,WAAW,QAAQ,CAAC;AACzB,SAAK,WAAW,IAAI;AAAA,EACtB;AAAA,EAEU,aAAa,UAAwB;AAC7C,SAAK,MAAM;AACX,UAAM,OAAO,OAAO,KAAK,kBAAkB,KAAK;AAChD,SAAK,WAAW,UAAU,CAAC;AAC3B,SAAK,WAAW,IAAI;AAAA,EACtB;AAAA,EAEU,YAAY,SAAuB;AAC3C,SAAK,MAAM;AACX,UAAM,OAAO,OAAO,KAAK,kBAAkB,KAAK;AAChD,SAAK,WAAW,SAAS,CAAC;AAC1B,SAAK,WAAW,IAAI;AAAA,EACtB;AAAA,EAEA,WAAW,MAAoB;AAC7B,aAAS,wBAAwB,SAAS,KAAK,SAAS,KAAK,GAAG,oBAAoB,KAAK,UAAU;AACnG,SAAK,QAAQ,MAAM,IAAI;AAAA,EACzB;AAAA,EAEA,SAAS,MAAoB;AAC3B,aAAS,wBAAwB,SAAS,MAAM,oBAAoB,KAAK,UAAU;AACnF,SAAK,QAAQ,MAAM,IAAI;AAAA,EACzB;AAAA,EAEA,QAA0B;AACxB,aAAS,mBAAmB;AAC5B,WAAO,IAAI,QAAiB,aAAW;AACrC,WAAK,QAAQ,IAAI,MAAM;AACrB,gBAAQ,IAAI;AAAA,MACd,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;",
  "names": ["Debug", "WorkerAbstract"]
}
