{
  "version": 3,
  "sources": ["../../src/pylontech/WorkerNet.ts"],
  "sourcesContent": ["// Copyright (c) 2020-2023 Tr\u00E4ger\n\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\nimport Debug from 'debug';\nimport * as net from 'net';\nimport WorkerAbstract from './WorkerAbstract';\n\nconst debugApi = Debug('pylontech:api');\n\nexport = class WorkerNet extends WorkerAbstract {\n  protected _socket: net.Socket = new net.Socket();\n  protected _baudRate: number;\n  protected _rfc2217: boolean;\n\n  constructor(host: string, port: number, baudRate: number, rfc2217: boolean, noPrompt?: boolean, debugData?: (data: Buffer) => void) {\n    debugApi('MyWorkerNet.constructor', 'host:', host, 'port:', port);\n    super();\n    if (debugData) this._socket.on('data', debugData);\n    this._baudRate = baudRate;\n    this._rfc2217 = rfc2217;\n    if (noPrompt) this._noPrompt = noPrompt;\n    this._socket.pipe(this._consolenReader);\n    this._socket.connect(port, host, this._netConnected.bind(this));\n  }\n\n  protected _netConnected(): void {\n    if (this._rfc2217) {\n      this._will();\n      this._setBaudRate(this._baudRate);\n    }\n    this._connected();\n  }\n\n  protected _will(): void {\n    const data = Buffer.from('FFFB2C', 'hex');\n    this.sendDataB(data);\n  }\n\n  protected _setBaudRate(baudRate: number): void {\n    this._will();\n    const data = Buffer.from('fffa2c0100000000fff0', 'hex');\n    data.writeUInt32BE(baudRate, 4);\n    this.sendDataB(data);\n  }\n\n  protected _setDatasize(datasize: number): void {\n    this._will();\n    const data = Buffer.from('fffa2c0200fff0', 'hex');\n    data.writeUInt8(datasize, 4);\n    this.sendDataB(data);\n  }\n\n  protected _setParity(parity: number): void {\n    this._will();\n    const data = Buffer.from('fffa2c0300fff0', 'hex');\n    data.writeUInt8(parity, 4);\n    this.sendDataB(data);\n  }\n\n  protected _setStopsize(stopsize: number): void {\n    this._will();\n    const data = Buffer.from('fffa2c0400fff0', 'hex');\n    data.writeUInt8(stopsize, 4);\n    this.sendDataB(data);\n  }\n\n  protected _setControl(control: number): void {\n    this._will();\n    const data = Buffer.from('fffa2c0500fff0', 'hex');\n    data.writeUInt8(control, 4);\n    this.sendDataB(data);\n  }\n\n  sendDataB(data: Buffer): void {\n    debugApi('MyWorkerNet.sendDataB', 'data:', data.toString('hex'), 'this._activeCmd:', this._activeCmd);\n    this._socket.write(data);\n  }\n\n  sendData(data: string): void {\n    debugApi('MyWorkerNet.sendData', 'data:', data, 'this._activeCmd:', this._activeCmd);\n    this._socket.write(data);\n  }\n\n  close(): Promise<boolean> {\n    debugApi('MyWorkerNet.close');\n    return new Promise<boolean>(resolve => {\n      this._socket.end(() => {\n        resolve(true);\n      });\n    });\n  }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAoBA,mBAAkB;AAClB,UAAqB;AACrB,4BAA2B;AAE3B,MAAM,eAAW,aAAAA,SAAM,eAAe;AAEtC,iBAAS,MAAM,kBAAkB,sBAAAC,QAAe;AAAA,EAK9C,YAAY,MAAc,MAAc,UAAkB,SAAkB,UAAoB,WAAoC;AAClI,aAAS,2BAA2B,SAAS,MAAM,SAAS,IAAI;AAChE,UAAM;AANR,SAAU,UAAsB,IAAI,IAAI,OAAO;AAO7C,QAAI;AAAW,WAAK,QAAQ,GAAG,QAAQ,SAAS;AAChD,SAAK,YAAY;AACjB,SAAK,WAAW;AAChB,QAAI;AAAU,WAAK,YAAY;AAC/B,SAAK,QAAQ,KAAK,KAAK,eAAe;AACtC,SAAK,QAAQ,QAAQ,MAAM,MAAM,KAAK,cAAc,KAAK,IAAI,CAAC;AAAA,EAChE;AAAA,EAEU,gBAAsB;AAC9B,QAAI,KAAK,UAAU;AACjB,WAAK,MAAM;AACX,WAAK,aAAa,KAAK,SAAS;AAAA,IAClC;AACA,SAAK,WAAW;AAAA,EAClB;AAAA,EAEU,QAAc;AACtB,UAAM,OAAO,OAAO,KAAK,UAAU,KAAK;AACxC,SAAK,UAAU,IAAI;AAAA,EACrB;AAAA,EAEU,aAAa,UAAwB;AAC7C,SAAK,MAAM;AACX,UAAM,OAAO,OAAO,KAAK,wBAAwB,KAAK;AACtD,SAAK,cAAc,UAAU,CAAC;AAC9B,SAAK,UAAU,IAAI;AAAA,EACrB;AAAA,EAEU,aAAa,UAAwB;AAC7C,SAAK,MAAM;AACX,UAAM,OAAO,OAAO,KAAK,kBAAkB,KAAK;AAChD,SAAK,WAAW,UAAU,CAAC;AAC3B,SAAK,UAAU,IAAI;AAAA,EACrB;AAAA,EAEU,WAAW,QAAsB;AACzC,SAAK,MAAM;AACX,UAAM,OAAO,OAAO,KAAK,kBAAkB,KAAK;AAChD,SAAK,WAAW,QAAQ,CAAC;AACzB,SAAK,UAAU,IAAI;AAAA,EACrB;AAAA,EAEU,aAAa,UAAwB;AAC7C,SAAK,MAAM;AACX,UAAM,OAAO,OAAO,KAAK,kBAAkB,KAAK;AAChD,SAAK,WAAW,UAAU,CAAC;AAC3B,SAAK,UAAU,IAAI;AAAA,EACrB;AAAA,EAEU,YAAY,SAAuB;AAC3C,SAAK,MAAM;AACX,UAAM,OAAO,OAAO,KAAK,kBAAkB,KAAK;AAChD,SAAK,WAAW,SAAS,CAAC;AAC1B,SAAK,UAAU,IAAI;AAAA,EACrB;AAAA,EAEA,UAAU,MAAoB;AAC5B,aAAS,yBAAyB,SAAS,KAAK,SAAS,KAAK,GAAG,oBAAoB,KAAK,UAAU;AACpG,SAAK,QAAQ,MAAM,IAAI;AAAA,EACzB;AAAA,EAEA,SAAS,MAAoB;AAC3B,aAAS,wBAAwB,SAAS,MAAM,oBAAoB,KAAK,UAAU;AACnF,SAAK,QAAQ,MAAM,IAAI;AAAA,EACzB;AAAA,EAEA,QAA0B;AACxB,aAAS,mBAAmB;AAC5B,WAAO,IAAI,QAAiB,aAAW;AACrC,WAAK,QAAQ,IAAI,MAAM;AACrB,gBAAQ,IAAI;AAAA,MACd,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;",
  "names": ["Debug", "WorkerAbstract"]
}
