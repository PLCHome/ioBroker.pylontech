{
  "version": 3,
  "sources": ["../../src/pylontech/Parsers.ts"],
  "sourcesContent": ["// Copyright (c) 2020-2023 Tr\u00E4ger\n\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\nimport { debug } from 'debug';\nimport { IParser } from './IParser';\nimport { ParserBatN } from './ParserBatN';\nimport { ParserInfoN } from './ParserInfoN';\nimport { ParserLog } from './ParserLog';\nimport { ParserPwr } from './ParserPwr';\nimport { ParserPwrN } from './ParserPwrN';\nimport { ParserSohN } from './ParserSohN';\nimport { ParserStatN } from './ParserStatN';\nimport { ParserTime } from './ParserTime';\n\nconst debugParsers = debug('pylontech:parsers');\n\nexport class Parsers {\n  protected _parser: IParser[] = [];\n\n  constructor() {\n    debugParsers('Parsers.constructor');\n    this._parser.push(new ParserInfoN());\n    this._parser.push(new ParserPwrN());\n    this._parser.push(new ParserBatN());\n    this._parser.push(new ParserSohN());\n    this._parser.push(new ParserStatN());\n    this._parser.push(new ParserPwr());\n    this._parser.push(new ParserLog());\n    this._parser.push(new ParserTime());\n  }\n\n  getParser(data: string): IParser | undefined {\n    debugParsers('Parsers.getParser', 'data', data);\n    let result: IParser | undefined;\n    this._parser.forEach(parser => {\n      if (parser.isParser(data)) {\n        debugParsers('Parsers.getParser', 'parser', parser.getParserName());\n        result = parser;\n      }\n    });\n    return result;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA,mBAAsB;AAEtB,wBAA2B;AAC3B,yBAA4B;AAC5B,uBAA0B;AAC1B,uBAA0B;AAC1B,wBAA2B;AAC3B,wBAA2B;AAC3B,yBAA4B;AAC5B,wBAA2B;AAE3B,MAAM,mBAAe,oBAAM,mBAAmB;AAEvC,MAAM,QAAQ;AAAA,EAGnB,cAAc;AAFd,SAAU,UAAqB,CAAC;AAG9B,iBAAa,qBAAqB;AAClC,SAAK,QAAQ,KAAK,IAAI,+BAAY,CAAC;AACnC,SAAK,QAAQ,KAAK,IAAI,6BAAW,CAAC;AAClC,SAAK,QAAQ,KAAK,IAAI,6BAAW,CAAC;AAClC,SAAK,QAAQ,KAAK,IAAI,6BAAW,CAAC;AAClC,SAAK,QAAQ,KAAK,IAAI,+BAAY,CAAC;AACnC,SAAK,QAAQ,KAAK,IAAI,2BAAU,CAAC;AACjC,SAAK,QAAQ,KAAK,IAAI,2BAAU,CAAC;AACjC,SAAK,QAAQ,KAAK,IAAI,6BAAW,CAAC;AAAA,EACpC;AAAA,EAEA,UAAU,MAAmC;AAC3C,iBAAa,qBAAqB,QAAQ,IAAI;AAC9C,QAAI;AACJ,SAAK,QAAQ,QAAQ,YAAU;AAC7B,UAAI,OAAO,SAAS,IAAI,GAAG;AACzB,qBAAa,qBAAqB,UAAU,OAAO,cAAc,CAAC;AAClE,iBAAS;AAAA,MACX;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AACF;",
  "names": []
}
