{
  "version": 3,
  "sources": ["../src/test.ts"],
  "sourcesContent": ["// Copyright (c) 2020-2023 Tr\u00E4ger\n\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\nimport fs from 'fs/promises';\nimport { Value } from './pylontech/Value';\nimport WorkerAbstract from './pylontech/WorkerAbstract';\nimport WorkerSerial from './pylontech/WorkerSerial';\n//import WorkerNet from './pylontech/WorkerNet';\n\nconst worker: WorkerAbstract = new WorkerSerial('com4', 115200, 'FORCE');\n//const worker: WorkerAbstract = new WorkerNet('esp-link.fritz.box', 23, 'FORCE');\n\nfs.writeFile('./elements', '', { flag: 'w+' });\nworker.open().then(() => {\n  return worker.getData({ info: true, power: true, statistic: true, celldata: true, cellsoh: true }).then((allData: any) => {\n    //console.log(JSON.stringify(allData, null, ' '));\n    function walk(path: string, val: any): void {\n      if (val instanceof Value) {\n        fs.writeFile('./elements', path + '\\t' + val.value + '\\n', { flag: 'a+' });\n        //console.log(path + '\\t' + val.value);\n      } else {\n        Object.keys(val).forEach(key => {\n          walk(`${path}.${key}`, val[key]);\n        });\n      }\n    }\n    walk('pylontech.0', allData);\n  });\n});\n\nfunction to(time: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, time * 1000);\n  });\n}\n\nto(30).then((): Promise<boolean> => {\n  return worker.close();\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAmBA,sBAAe;AACf,mBAAsB;AAEtB,0BAAyB;AAGzB,MAAM,SAAyB,IAAI,oBAAAA,QAAa,QAAQ,QAAQ,OAAO;AAGvE,gBAAAC,QAAG,UAAU,cAAc,IAAI,EAAE,MAAM,KAAK,CAAC;AAC7C,OAAO,KAAK,EAAE,KAAK,MAAM;AACvB,SAAO,OAAO,QAAQ,EAAE,MAAM,MAAM,OAAO,MAAM,WAAW,MAAM,UAAU,MAAM,SAAS,KAAK,CAAC,EAAE,KAAK,CAAC,YAAiB;AAExH,aAAS,KAAK,MAAc,KAAgB;AAC1C,UAAI,eAAe,oBAAO;AACxB,wBAAAA,QAAG,UAAU,cAAc,OAAO,MAAO,IAAI,QAAQ,MAAM,EAAE,MAAM,KAAK,CAAC;AAAA,MAE3E,OAAO;AACL,eAAO,KAAK,GAAG,EAAE,QAAQ,SAAO;AAC9B,eAAK,GAAG,QAAQ,OAAO,IAAI,IAAI;AAAA,QACjC,CAAC;AAAA,MACH;AAAA,IACF;AACA,SAAK,eAAe,OAAO;AAAA,EAC7B,CAAC;AACH,CAAC;AAED,SAAS,GAAG,MAA6B;AACvC,SAAO,IAAI,QAAc,aAAW;AAClC,eAAW,SAAS,OAAO,GAAI;AAAA,EACjC,CAAC;AACH;AAEA,GAAG,EAAE,EAAE,KAAK,MAAwB;AAClC,SAAO,OAAO,MAAM;AACtB,CAAC;",
  "names": ["WorkerSerial", "fs"]
}
